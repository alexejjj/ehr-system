import React, {useState} from 'react'
import classes from './NewPatientForm.module.css'
import PatientService, {NodeService} from "../../../API/PatientService";


const NewPatientForm = () => {

    const [formData, setFormData] = useState({
            height: '200',
            weight: 100,
            hairColor: 'black',
            eyeColor: 'blue',
            skinTone: 'white',
            freckles: {
                value: 'many',
                code: 'at0005'
            },
            doesTheSkinTurnRedWhenSunburned: "false",
            doesTheSkinTanInTheSun: {
                value: 'sometimes',
                code: 'at0014'
            },
            howOftenDoYouHaveVacationInTheSouth: {
                value: '20 days per year',
                code: 'at0023'
            },
            doYouUseSunscreenInSummer: "false",
            sport: {
                value: 'skiing',
                code: 'at0028'
            },
            doYouHaveAHistoryOfPsoriasis: "false",
            whenDidTheLesionAppear: 'recently',
            summary: 'Some summary',
            heightX: '12.4',
            widthY: 23.1,
            area: 11.3,
            borders: {
                value: 'clear',
                code: 'at0012'
            },
            dominantColor: {
                value: 'grey',
                code: 'at0018'
            },
            shape: {
                value: 'oval',
                code: 'at0020'
            },
            inclusions: 'true',
            symmetry: "false",
            photo: '',
            familyDiagnosisName: 'Same diagnoses',
            familyDescription: 'Some family Description',
            familyCases: "false",
            problemDiagnosisName: 'Some diagnoses',
            clinicalDescription: 'Some description',
            comment: 'Some comment'
    })

    const [personalInfo, setPersonalInfo] = useState({
        firstName: '',
        lastName: '',
        birthDate: Date.now(),
        gender: 'M',
        ehr: ''
    })


    const handleDefiningCodes = event => {
        const definingCodes = {
            sport: {
                'skiing': 'at0028',
                'race walking': 'at0030',
                'rowing': 'at0033',
                'climbing': 'at0034',
                'kayaking': 'at0038',
                'skating': 'at0029',
                'other outdoor sports': 'at0035',
                'hiking': 'at0037',
                'running': 'at0031',
                'riding a bike': 'at0032'
            },
            howOftenDoYouHaveVacationInTheSouth: {
                'more than 20 days per year': 'at0024',
                '10 days per year': 'at0022',
                '20 days per year': 'at0023',
                'never': 'at0025'
            },
            freckles: {
                'moderate amount': 'at0006',
                'many': 'at0005',
                'sporadic': 'at0007',
                'no': 'at0008'
            },
            doesTheSkinTanInTheSun: {
                'sometimes': 'at0014',
                'moderate': 'at0013',
                'rarely': 'at0015',
                'no': 'at0016',
                'fast and strong': 'at0012'
            },
            borders: {
                'clear': 'at0012',
                'unclear': 'at0013'
            },
            dominantColor: {
                'grey': 'at0018',
                'blue': 'at0019',
                'beige': 'at0015',
                'red': 'at0014',
                'black': 'at0017',
                'brown': 'at0016'
            },
            shape: {
                'oval': 'at0020',
                'round': 'at0021',
                'irregular': 'at0022'
            }
        }
        setFormData({...formData,
                            [event.target.id]: {
                                value: event.target.value,
                                code: definingCodes[event.target.id][event.target.value]
                            }
        })
        console.log(formData)
    }

    const toBase64 = file => {
        return new Promise(resolve => {
          let baseURL = ''
          let reader = new FileReader()
          reader.readAsDataURL(file)
          reader.onload = () => {
            baseURL = reader.result
            resolve(baseURL)
          }
        })
    }

    const handleFileInputChange = event => {
        const file = event.target.files[0]
        toBase64(file).then(result => {
            const base64 = result.split(',')[1]
            setFormData({...formData, photo: base64})
        })
    }

    const onPersonalInfoChange = event => {
        setPersonalInfo({...personalInfo, [event.target.id]: event.target.value})
        console.log(personalInfo)
    }

    const onChange = event => {
        setFormData({...formData, [event.target.id]: event.target.value})
    }

    async function onSubmit(event) {
        event.preventDefault()
        console.log(personalInfo)
        PatientService.postEhr().then(response => setPersonalInfo({...personalInfo, ehr: response.headers.etag}))
        NodeService.postNewPatient(personalInfo, localStorage.getItem('token')).then(response => console.log(response))
        console.log(personalInfo)
        console.log(personalInfo.ehr)
        console.log(formData)
        PatientService.postComposition(personalInfo.ehr.slice(1, -1), formData).then(response => console.log(response.headers))
    }


    return (
        <div className={classes.new__patient}>
            <h1 className={classes.title}>New patient</h1>
            <form className={classes.patient__form} onSubmit={event => onSubmit(event)}>
                <div className={classes.input__block}>
                    <h4>Personal information</h4>
                    <input className={classes.input__field}
                           type='text'
                           id='firstName'
                           value={personalInfo.firstName}
                           onChange={event => onPersonalInfoChange(event)}
                           placeholder='First Name'/>
                    <input className={classes.input__field}
                           type='text'
                           id='lastName'
                           value={personalInfo.lastName}
                           onChange={event => onPersonalInfoChange(event)}
                           placeholder='Last Name'/>
                    <input className={classes.input__field}
                           type='text'
                           id='birthDate'
                           value={personalInfo.birthDate}
                           onChange={event => onPersonalInfoChange(event)}
                           placeholder='Birth Date'/>
                    <input className={classes.input__field}
                           type='radio'
                           id='gender'
                           value={personalInfo.gender}
                           onChange={event => onPersonalInfoChange(event)}
                           placeholder='M'/>
                    <input className={classes.input__field}
                           type='radio'
                           id='gender'
                           value={personalInfo.gender}
                           onChange={event => onPersonalInfoChange(event)}
                           placeholder='W'/>
                </div>
                <div className={classes.input__block}>
                    <h4>Health and lifestyle</h4>
                    <input className={classes.input__field}
                           type='text'
                           id='height'
                           value={formData.height}
                           onChange={event => onChange(event)}
                           placeholder='Height'/>
                    <input className={classes.input__field}
                           type='text'
                           id='weight'
                           value={formData.weight}
                           onChange={event => onChange(event)}
                           placeholder='Weight'/>
                    <h4>Physical characteristics</h4>
                    <h6 className={classes.label__field}>Hair color</h6>
                    <select id='hairColor'
                            onChange={event => onChange(event)}
                            value={formData.hairColor}
                            className={classes.dropdown__field}>
                        <option className={classes.dropdown__option}>black</option>
                        <option className={classes.dropdown__option}>blonde</option>
                        <option className={classes.dropdown__option}>red</option>
                        <option className={classes.dropdown__option}>brown</option>
                    </select>
                    <h6 className={classes.label__field}>Eye color</h6>
                    <select id='eyeColor'
                            onChange={event => onChange(event)}
                            value={formData.eyeColor}
                            className={classes.dropdown__field}>
                        <option className={classes.dropdown__option}>grey</option>
                        <option className={classes.dropdown__option}>blue</option>
                        <option className={classes.dropdown__option}>green</option>
                        <option className={classes.dropdown__option}>karrie</option>
                    </select>
                    <h6 className={classes.label__field}>Skin tone</h6>
                    <select id='skinTone'
                            onChange={event => onChange(event)}
                            value={formData.skinTone}
                            className={classes.dropdown__field}>
                        <option className={classes.dropdown__option}>white</option>
                        <option className={classes.dropdown__option}>very white</option>
                        <option className={classes.dropdown__option}>brown</option>
                        <option className={classes.dropdown__option}>dark brown</option>
                        <option className={classes.dropdown__option}>light beige</option>
                    </select>
                </div>
                <div className={classes.input__block}>
                    <h4>Skin disease risk</h4>
                    <h6 className={classes.label__field}>Freckles</h6>
                    <select id='freckles'
                            onChange={event => handleDefiningCodes(event)}
                            value={formData.freckles.value}
                            className={classes.dropdown__field}>
                        <option className={classes.dropdown__option}>many</option>
                        <option className={classes.dropdown__option}>moderate amount</option>
                        <option className={classes.dropdown__option}>sporadic</option>
                        <option className={classes.dropdown__option}>no</option>
                    </select>
                    <h6 className={classes.label__field}>Does the skin turn red when sunburned?</h6>
                    <select id='doesTheSkinTurnRedWhenSunburned'
                            onChange={event => onChange(event)}
                            value={formData.doesTheSkinTurnRedWhenSunburned}
                            className={classes.dropdown__field}>
                        <option className={classes.dropdown__option}>true</option>
                        <option className={classes.dropdown__option}>false</option>
                    </select>
                    <h6 className={classes.label__field}>Does the skin tan in the sun?</h6>
                    <select id='doesTheSkinTanInTheSun'
                            onChange={event => handleDefiningCodes(event)}
                            value={formData.doesTheSkinTanInTheSun.value}
                            className={classes.dropdown__field}>
                        <option className={classes.dropdown__option}>fast and strong</option>
                        <option className={classes.dropdown__option}>moderate</option>
                        <option className={classes.dropdown__option}>sometimes</option>
                        <option className={classes.dropdown__option}>rarely</option>
                        <option className={classes.dropdown__option}>no</option>
                    </select>
                    <h6 className={classes.label__field}>How often do you have vacation in the south?</h6>
                    <select id='howOftenDoYouHaveVacationInTheSouth'
                            onChange={event => handleDefiningCodes(event)}
                            value={formData.howOftenDoYouHaveVacationInTheSouth.value}
                            className={classes.dropdown__field}>
                        <option className={classes.dropdown__option}>10 days per year</option>
                        <option className={classes.dropdown__option}>20 days per year</option>
                        <option className={classes.dropdown__option}>more than 20 days per year</option>
                        <option className={classes.dropdown__option}>never</option>
                    </select>
                    <h6 className={classes.label__field}>Do you use sunscreen in summer?</h6>
                    <select id='doYouUseSunscreenInSummer'
                            onChange={event => onChange(event)}
                            value={formData.doYouUseSunscreenInSummer}
                            className={classes.dropdown__field}>
                        <option className={classes.dropdown__option}>true</option>
                        <option className={classes.dropdown__option}>false</option>
                    </select>
                    <h6 className={classes.label__field}>Sport</h6>
                    <select id='sport'
                            onChange={event => handleDefiningCodes(event)}
                            value={formData.sport.value}
                            className={classes.dropdown__field}>
                        <option className={classes.dropdown__option}>skiing</option>
                        <option className={classes.dropdown__option}>skating</option>
                        <option className={classes.dropdown__option}>race walking</option>
                        <option className={classes.dropdown__option}>running</option>
                        <option className={classes.dropdown__option}>riding a bike</option>
                        <option className={classes.dropdown__option}>rowing</option>
                        <option className={classes.dropdown__option}>climbing</option>
                        <option className={classes.dropdown__option}>hiking</option>
                        <option className={classes.dropdown__option}>kayaking</option>
                        <option className={classes.dropdown__option}>other outdoor sports</option>
                    </select>
                </div>
                <div className={classes.input__block}>
                    <h4>Family history</h4>
                    <h4>Story/history</h4>
                    <h6 className={classes.label__field}>Do you have a history of psoriasis?</h6>
                    <select id='doYouHaveAHistoryOfPsoriasis'
                            onChange={event => onChange(event)}
                            value={formData.doYouHaveAHistoryOfPsoriasis}
                            className={classes.dropdown__field}>
                        <option className={classes.dropdown__option}>true</option>
                        <option className={classes.dropdown__option}>false</option>
                    </select>
                    <h6 className={classes.label__field}>When did the lesion appear?</h6>
                    <select id='whenDidTheLesionAppear'
                            onChange={event => onChange(event)}
                            value={formData.whenDidTheLesionAppear}
                            className={classes.dropdown__field}>
                         <option className={classes.dropdown__option}>recently</option>
                         <option className={classes.dropdown__option}>from childhood</option>
                         <option className={classes.dropdown__option}>can not answer</option>
                    </select>
                </div>
                <div className={classes.input__block}>
                    <h4>Physical characteristics</h4>
                    <input className={classes.input__field}
                           type='text'
                           id='heightX'
                           value={formData.heightX}
                           onChange={event => onChange(event)}
                           placeholder='Height (X)'/>
                    <input className={classes.input__field}
                           type='text'
                           id='widthY'
                           value={formData.widthY}
                           onChange={event => onChange(event)}
                           placeholder='Width (Y)'/>
                    <input className={classes.input__field}
                           type='text'
                           id='area'
                           value={formData.area}
                           onChange={event => onChange(event)}
                           placeholder='Area'/>
                    <h6 className={classes.label__field}>Borders</h6>
                    <select id='borders'
                            onChange={event => handleDefiningCodes(event)}
                            value={formData.borders.value}
                            className={classes.dropdown__field}>
                         <option className={classes.dropdown__option}>clear</option>
                         <option className={classes.dropdown__option}>unclear</option>
                    </select>
                    <h6 className={classes.label__field}>Dominant color</h6>
                    <select id='dominantColor'
                            onChange={event => handleDefiningCodes(event)}
                            value={formData.dominantColor.value}
                            className={classes.dropdown__field}>
                         <option className={classes.dropdown__option}>red</option>
                         <option className={classes.dropdown__option}>beige</option>
                         <option className={classes.dropdown__option}>brown</option>
                         <option className={classes.dropdown__option}>black</option>
                         <option className={classes.dropdown__option}>grey</option>
                         <option className={classes.dropdown__option}>blue</option>
                    </select>
                    <h6 className={classes.label__field}>Shape</h6>
                    <select id='shape'
                            onChange={event => handleDefiningCodes(event)}
                            value={formData.shape.value}
                            className={classes.dropdown__field}>
                         <option className={classes.dropdown__option}>round</option>
                         <option className={classes.dropdown__option}>oval</option>
                         <option className={classes.dropdown__option}>irregular</option>
                    </select>
                    <h6 className={classes.label__field}>Inclusions</h6>
                    <select id='inclusions'
                            onChange={event => onChange(event)}
                            value={formData.inclusions}
                            className={classes.dropdown__field}>
                        <option className={classes.dropdown__option}>true</option>
                        <option className={classes.dropdown__option}>false</option>
                    </select>
                    <h6 className={classes.label__field}>Symmetry</h6>
                    <select id='symmetry'
                            onChange={event => onChange(event)}
                            value={formData.symmetry}
                            className={classes.dropdown__field}>
                        <option className={classes.dropdown__option}>true</option>
                        <option className={classes.dropdown__option}>false</option>
                    </select>
                    <h4 className={classes.label__field}>Photo</h4>
                    <input className={classes.input__field}
                           type='file'
                           id='photo'
                           onChange={event => handleFileInputChange(event)}
                           placeholder='Photo'/>
                </div>
                <div className={classes.input__block}>
                    <h4>Additional information</h4>
                    <input className={classes.input__field}
                           type='text'
                           id='problemDiagnosisName'
                           value={formData.problemDiagnosisName}
                           onChange={event => onChange(event)}
                           placeholder='Diagnosis'/>
                    <input className={classes.input__field}
                           type='text'
                           id='clinicalDescription'
                           value={formData.clinicalDescription}
                           onChange={event => onChange(event)}
                           placeholder='Description'/>
                    <input className={classes.input__field}
                           type='text'
                           id='comment'
                           value={formData.comment}
                           onChange={event => onChange(event)}
                           placeholder='Comments'/>
                </div>
                <div className={classes.input__block}>
                    <h4>Family history</h4>
                    <input className={classes.input__field}
                           type='text'
                           id='familyDiagnosisName'
                           value={formData.familyDiagnosisName}
                           onChange={event => onChange(event)}
                           placeholder='Family diagnosis'/>
                    <input className={classes.input__field}
                           type='text'
                           id='familyDescription'
                           value={formData.familyDescription}
                           onChange={event => onChange(event)}
                           placeholder='Description'/>
                    <select id='familyCases'
                            onChange={event => onChange(event)}
                            value={formData.familyCases}
                            className={classes.dropdown__field}>
                        <option className={classes.dropdown__option}>true</option>
                        <option className={classes.dropdown__option}>false</option>
                    </select>

                </div>
                <button type='submit' className={classes.plus__button}></button>
            </form>
        </div>
    );
};

export default NewPatientForm;
